name: Multi-Environment CI/CD Pipeline

on:
  push:
    branches: [dev, main, master]
  pull_request:
    branches: [dev, main, master]

env:
  REGISTRY: ghcr.io

jobs:
  # Optional: Add tests if you have a test suite
  # Uncomment and modify this section based on your tech stack
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Run your tests here
  #       run: echo "Add your test commands here"

  build-and-push:
    # If you enable tests above, add this line:
    # needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    outputs:
      image-tags: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ github.event.repository.name }}
          tags: |
            type=raw,value=prod-latest,enable={{is_default_branch}}
            type=raw,value=prod-{{sha}},enable={{is_default_branch}}
            type=raw,value=staging-latest,enable=${{ github.ref_name == 'main' && github.ref_name != github.event.repository.default_branch }}
            type=raw,value=staging-{{sha}},enable=${{ github.ref_name == 'main' && github.ref_name != github.event.repository.default_branch }}
            type=raw,value=dev-latest,enable=${{ github.ref_name == 'dev' }}
            type=raw,value=dev-{{sha}},enable=${{ github.ref_name == 'dev' }}
            type=ref,event=pr,prefix=pr-
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.revision={{sha}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Quick security check (Dockerfile lint)
        if: github.event_name != 'pull_request'
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: tty
          no-fail: true

      - name: Build summary
        if: always()
        run: |
          echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: $(if [ '${{ github.ref_name }}' = 'master' ]; then echo 'Production'; elif [ '${{ github.ref_name }}' = 'main' ]; then echo 'Staging'; elif [ '${{ github.ref_name }}' = 'dev' ]; then echo 'Development'; else echo 'Other'; fi)" >> $GITHUB_STEP_SUMMARY
          echo "**Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY

  deploy-development:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: development
    
    steps:
      - name: Deploy to Development
        run: |
          echo "🚀 Deploying to Development Environment"
          echo "Branch: dev"
          echo "Environment: Development"
          echo "Tags: ${{ needs.build-and-push.outputs.image-tags }}"
          echo "Auto-deployment completed - no manual approval required"
          
          # Add your actual deployment commands here:
          # kubectl set image deployment/myapp-dev myapp=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ github.event.repository.name }}:dev-latest
          # helm upgrade myapp-dev ./helm-chart --set image.tag=dev-${{ github.sha }}
          # docker-compose -f docker-compose.dev.yml up -d

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Deploy to Staging
        run: |
          echo "🚀 Deploying to Staging Environment"
          echo "Branch: main"
          echo "Environment: Staging"
          echo "Tags: ${{ needs.build-and-push.outputs.image-tags }}"
          echo "Manual approval was required and granted"
          
          # Add your actual deployment commands here:
          # kubectl set image deployment/myapp-staging myapp=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ github.event.repository.name }}:staging-latest
          # helm upgrade myapp-staging ./helm-chart --set image.tag=staging-${{ github.sha }}
          # docker-compose -f docker-compose.staging.yml up -d

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Deploy to Production
        run: |
          echo "🚀 Deploying to Production Environment"
          echo "Branch: master"
          echo "Environment: Production"
          echo "Tags: ${{ needs.build-and-push.outputs.image-tags }}"
          echo "Manual approval was required and granted"
          
          # Add your actual deployment commands here:
          # kubectl set image deployment/myapp-prod myapp=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ github.event.repository.name }}:prod-latest
          # helm upgrade myapp-prod ./helm-chart --set image.tag=prod-${{ github.sha }}
          # docker-compose -f docker-compose.prod.yml up -d

      - name: Production Deployment Notification
        if: success()
        run: |
          echo "✅ Production deployment completed successfully!"
          echo "🔗 Image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ github.event.repository.name }}:prod-latest"
          # Add notification commands here (Slack, Teams, email, etc.)
name: Build and Push Docker Image to GHCR

on:
  push:
    branches:
      - master    # Production
      - main      # Staging
      - dev       # Development

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write   # Required for GHCR

    steps:
      # 1️⃣ Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2️⃣ Install GitHub CLI + jq
      - name: Install GitHub CLI and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      # 3️⃣ Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4️⃣ Log in to GHCR
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 5️⃣ Define image tags (latest + commit + version)
      - name: Define image tags
        id: vars
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)
          IMAGE_BASE="ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}"

          case "${{ github.ref_name }}" in
            master)
              ENV="prod"
              ;;
            main)
              ENV="staging"
              ;;
            dev)
              ENV="dev"
              ;;
            *)
              echo "Branch not configured for Docker build"
              exit 1
              ;;
          esac

          # Get existing version tags from GHCR
          EXISTING_COUNT=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /users/${{ github.repository_owner }}/packages/container/${{ github.event.repository.name }}/versions \
            | jq "[.[].metadata.container.tags[] | select(startswith(\"$ENV-v\"))] | length")

          VERSION=$((EXISTING_COUNT + 1))

          IMAGE_TAG_VERSION="$IMAGE_BASE:$ENV-v$VERSION"
          IMAGE_TAG_LATEST="$IMAGE_BASE:$ENV-latest"
          IMAGE_TAG_COMMIT="$IMAGE_BASE:$ENV-$COMMIT_SHA"

          echo "IMAGE_TAG_VERSION=$IMAGE_TAG_VERSION" >> $GITHUB_ENV
          echo "IMAGE_TAG_LATEST=$IMAGE_TAG_LATEST" >> $GITHUB_ENV
          echo "IMAGE_TAG_COMMIT=$IMAGE_TAG_COMMIT" >> $GITHUB_ENV

          echo "Will build images:"
          echo "$IMAGE_TAG_VERSION"
          echo "$IMAGE_TAG_LATEST"
          echo "$IMAGE_TAG_COMMIT"

      # 6️⃣ Build and push Docker images
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_TAG_VERSION }}
            ${{ env.IMAGE_TAG_LATEST }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 7️⃣ Cleanup dangling images in CI
      - name: Remove dangling images
        run: |
          docker image prune -f      
